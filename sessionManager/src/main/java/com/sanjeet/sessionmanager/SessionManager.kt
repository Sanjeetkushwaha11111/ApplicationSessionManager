package com.sanjeet.sessionmanagerimport android.content.Contextimport com.google.gson.JsonArrayimport com.sanjeet.sessionmanager.Utils.convertSessionsToJsonArrayimport com.sanjeet.sessionmanager.Utils.getCurrentTimeStampimport com.sanjeet.sessionmanager.dataBase.SessionModelimport com.sanjeet.sessionmanager.dataBase.SessionRecordDaoimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport timber.log.Timberclass SessionManager(    private val sessionRecordDao: SessionRecordDao,    private val context: Context) {    private var sessionStartTimeStamp = ""    private var sessionStartMode: Boolean = false    private var sessionStartTime = 0L    fun startSession() {        sessionStartMode = Utils.isNetworkAvailable(context)        sessionStartTime = System.currentTimeMillis()        sessionStartTimeStamp = getCurrentTimeStamp()        Timber.e(">>>>>>>>>>>>Session Started: $sessionStartTimeStamp")    }    fun endSession(lifeCycleScope: CoroutineScope) {        val durationInSeconds = (System.currentTimeMillis() - sessionStartTime) / 1000        val sessionRecord = SessionModel(            startTime = sessionStartTimeStamp,            endTime = getCurrentTimeStamp(),            duration = durationInSeconds,            isOnline = sessionStartMode        )        Timber.e(">>>>>>>>>>>>Session Ended: ${sessionRecord.endTime}, Duration: $durationInSeconds")        lifeCycleScope.launch(Dispatchers.IO) {            sessionRecordDao.insert(sessionRecord)        }    }    fun getSessionData(lifeCycleScope: CoroutineScope, deleteAfterRetrieving: Boolean, callback: (List<SessionModel>) -> Unit) {        lifeCycleScope.launch(Dispatchers.IO) {            val sessions = sessionRecordDao.getAllSessions()            if (deleteAfterRetrieving) {                sessionRecordDao.deleteAllSessions()            }            callback(sessions)        }    }    fun getSessionDataAsJson(lifeCycleScope: CoroutineScope, deleteAfterRetrieving: Boolean, callback: (JsonArray) -> Unit) {        lifeCycleScope.launch(Dispatchers.IO) {            val sessions = sessionRecordDao.getAllSessions()            val jsonArray = convertSessionsToJsonArray(sessions)            if (deleteAfterRetrieving) {                sessionRecordDao.deleteAllSessions()            }            callback(jsonArray)        }    }    fun deleteAllSessions(lifeCycleScope: CoroutineScope) {        lifeCycleScope.launch(Dispatchers.IO) {            sessionRecordDao.deleteAllSessions()        }    }}